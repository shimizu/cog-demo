{"version":3,"file":"173.js","mappings":"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","sources":["webpack://deck.gl-minimum-template/./node_modules/geotiff/node_modules/lerc/LercDecode.js","webpack://deck.gl-minimum-template/./node_modules/geotiff/dist-module/compression/lerc.js"],"sourcesContent":["﻿/* jshint forin: false, bitwise: false */\n/*\nCopyright 2015-2021 Esri\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\nhttp://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n\nA copy of the license and additional notices are located with the\nsource distribution at:\n\nhttp://github.com/Esri/lerc/\n\nContributors:  Johannes Schmid, (LERC v1)\n               Chayanika Khatua, (LERC v1)\n               Wenxue Ju (LERC v1, v2.x)\n*/\n\n/* Copyright 2015-2021 Esri. Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License. You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0 @preserve */\n\n/**\n * a module for decoding LERC blobs\n * @module Lerc\n */\n(function() {\n  //this decoder supports all lerc versions, each version has its own class (LercDecode and Lerc2Decode). \n  //the exported module handles format variation autoamtically.\n\n  //the original LercDecode for Version 1\n  var LercDecode = (function() {\n\n    // Note: currently, this module only has an implementation for decoding LERC data, not encoding. The name of\n    // the class was chosen to be future proof.\n\n    var CntZImage = {};\n\n    CntZImage.defaultNoDataValue = -3.4027999387901484e+38; // smallest Float32 value\n\n    /**\n     * Decode a LERC byte stream and return an object containing the pixel data and some required and optional\n     * information about it, such as the image's width and height.\n     *\n     * @param {ArrayBuffer} input The LERC input byte stream\n     * @param {object} [options] Decoding options, containing any of the following properties:\n     * @config {number} [inputOffset = 0]\n     *        Skip the first inputOffset bytes of the input byte stream. A valid LERC file is expected at that position.\n     * @config {Uint8Array} [encodedMask = null]\n     *        If specified, the decoder will not read mask information from the input and use the specified encoded\n     *        mask data instead. Mask header/data must not be present in the LERC byte stream in this case.\n     * @config {number} [noDataValue = LercCode.defaultNoDataValue]\n     *        Pixel value to use for masked pixels.\n     * @config {ArrayBufferView|Array} [pixelType = Float32Array]\n     *        The desired type of the pixelData array in the return value. Note that it is the caller's responsibility to\n     *        provide an appropriate noDataValue if the default pixelType is overridden.\n     * @config {boolean} [returnMask = false]\n     *        If true, the return value will contain a maskData property of type Uint8Array which has one element per\n     *        pixel, the value of which is 1 or 0 depending on whether that pixel's data is present or masked. If the\n     *        input LERC data does not contain a mask, maskData will not be returned.\n     * @config {boolean} [returnEncodedMask = false]\n     *        If true, the return value will contain a encodedMaskData property, which can be passed into encode() as\n     *        encodedMask.\n     * @config {boolean} [returnFileInfo = false]\n     *        If true, the return value will have a fileInfo property that contains metadata obtained from the\n     *        LERC headers and the decoding process.\n     * @config {boolean} [computeUsedBitDepths = false]\n     *        If true, the fileInfo property in the return value will contain the set of all block bit depths\n     *        encountered during decoding. Will only have an effect if returnFileInfo option is true.\n     * @returns {{width, height, pixelData, minValue, maxValue, noDataValue, maskData, encodedMaskData, fileInfo}}\n     */\n    CntZImage.decode = function(input, options) {\n      options = options || {};\n\n      var skipMask = options.encodedMaskData || (options.encodedMaskData === null);\n      var parsedData = parse(input, options.inputOffset || 0, skipMask);\n\n      var noDataValue = (options.noDataValue !== null) ? options.noDataValue : CntZImage.defaultNoDataValue;\n\n      var uncompressedData = uncompressPixelValues(parsedData, options.pixelType || Float32Array,\n        options.encodedMaskData, noDataValue, options.returnMask);\n\n      var result = {\n        width: parsedData.width,\n        height: parsedData.height,\n        pixelData: uncompressedData.resultPixels,\n        minValue: uncompressedData.minValue,\n        maxValue: parsedData.pixels.maxValue,\n        noDataValue: noDataValue\n      };\n\n      if (uncompressedData.resultMask) {\n        result.maskData = uncompressedData.resultMask;\n      }\n\n      if (options.returnEncodedMask && parsedData.mask) {\n        result.encodedMaskData = parsedData.mask.bitset ? parsedData.mask.bitset : null;\n      }\n\n      if (options.returnFileInfo) {\n        result.fileInfo = formatFileInfo(parsedData);\n        if (options.computeUsedBitDepths) {\n          result.fileInfo.bitDepths = computeUsedBitDepths(parsedData);\n        }\n      }\n\n      return result;\n    };\n\n    var uncompressPixelValues = function(data, TypedArrayClass, maskBitset, noDataValue, storeDecodedMask) {\n      var blockIdx = 0;\n      var numX = data.pixels.numBlocksX;\n      var numY = data.pixels.numBlocksY;\n      var blockWidth = Math.floor(data.width / numX);\n      var blockHeight = Math.floor(data.height / numY);\n      var scale = 2 * data.maxZError;\n      var minValue = Number.MAX_VALUE, currentValue;\n      maskBitset = maskBitset || ((data.mask) ? data.mask.bitset : null);\n\n      var resultPixels, resultMask;\n      resultPixels = new TypedArrayClass(data.width * data.height);\n      if (storeDecodedMask && maskBitset) {\n        resultMask = new Uint8Array(data.width * data.height);\n      }\n      var blockDataBuffer = new Float32Array(blockWidth * blockHeight);\n\n      var xx, yy;\n      for (var y = 0; y <= numY; y++) {\n        var thisBlockHeight = (y !== numY) ? blockHeight : (data.height % numY);\n        if (thisBlockHeight === 0) {\n          continue;\n        }\n        for (var x = 0; x <= numX; x++) {\n          var thisBlockWidth = (x !== numX) ? blockWidth : (data.width % numX);\n          if (thisBlockWidth === 0) {\n            continue;\n          }\n\n          var outPtr = y * data.width * blockHeight + x * blockWidth;\n          var outStride = data.width - thisBlockWidth;\n\n          var block = data.pixels.blocks[blockIdx];\n\n          var blockData, blockPtr, constValue;\n          if (block.encoding < 2) {\n            // block is either uncompressed or bit-stuffed (encodings 0 and 1)\n            if (block.encoding === 0) {\n              // block is uncompressed\n              blockData = block.rawData;\n            } else {\n              // block is bit-stuffed\n              unstuff(block.stuffedData, block.bitsPerPixel, block.numValidPixels, block.offset, scale, blockDataBuffer, data.pixels.maxValue);\n              blockData = blockDataBuffer;\n            }\n            blockPtr = 0;\n          }\n          else if (block.encoding === 2) {\n            // block is all 0\n            constValue = 0;\n          }\n          else {\n            // block has constant value (encoding === 3)\n            constValue = block.offset;\n          }\n\n          var maskByte;\n          if (maskBitset) {\n            for (yy = 0; yy < thisBlockHeight; yy++) {\n              if (outPtr & 7) {\n                //\n                maskByte = maskBitset[outPtr >> 3];\n                maskByte <<= outPtr & 7;\n              }\n              for (xx = 0; xx < thisBlockWidth; xx++) {\n                if (!(outPtr & 7)) {\n                  // read next byte from mask\n                  maskByte = maskBitset[outPtr >> 3];\n                }\n                if (maskByte & 128) {\n                  // pixel data present\n                  if (resultMask) {\n                    resultMask[outPtr] = 1;\n                  }\n                  currentValue = (block.encoding < 2) ? blockData[blockPtr++] : constValue;\n                  minValue = minValue > currentValue ? currentValue : minValue;\n                  resultPixels[outPtr++] = currentValue;\n                } else {\n                  // pixel data not present\n                  if (resultMask) {\n                    resultMask[outPtr] = 0;\n                  }\n                  resultPixels[outPtr++] = noDataValue;\n                }\n                maskByte <<= 1;\n              }\n              outPtr += outStride;\n            }\n          } else {\n            // mask not present, simply copy block over\n            if (block.encoding < 2) {\n              // duplicating this code block for performance reasons\n              // blockData case:\n              for (yy = 0; yy < thisBlockHeight; yy++) {\n                for (xx = 0; xx < thisBlockWidth; xx++) {\n                  currentValue = blockData[blockPtr++];\n                  minValue = minValue > currentValue ? currentValue : minValue;\n                  resultPixels[outPtr++] = currentValue;\n                }\n                outPtr += outStride;\n              }\n            }\n            else {\n              // constValue case:\n              minValue = minValue > constValue ? constValue : minValue;\n              for (yy = 0; yy < thisBlockHeight; yy++) {\n                for (xx = 0; xx < thisBlockWidth; xx++) {\n                  resultPixels[outPtr++] = constValue;\n                }\n                outPtr += outStride;\n              }\n            }\n          }\n          if ((block.encoding === 1) && (blockPtr !== block.numValidPixels)) {\n            throw \"Block and Mask do not match\";\n          }\n          blockIdx++;\n        }\n      }\n\n      return {\n        resultPixels: resultPixels,\n        resultMask: resultMask,\n        minValue: minValue\n      };\n    };\n\n    var formatFileInfo = function(data) {\n      return {\n        \"fileIdentifierString\": data.fileIdentifierString,\n        \"fileVersion\": data.fileVersion,\n        \"imageType\": data.imageType,\n        \"height\": data.height,\n        \"width\": data.width,\n        \"maxZError\": data.maxZError,\n        \"eofOffset\": data.eofOffset,\n        \"mask\": data.mask ? {\n          \"numBlocksX\": data.mask.numBlocksX,\n          \"numBlocksY\": data.mask.numBlocksY,\n          \"numBytes\": data.mask.numBytes,\n          \"maxValue\": data.mask.maxValue\n        } : null,\n        \"pixels\": {\n          \"numBlocksX\": data.pixels.numBlocksX,\n          \"numBlocksY\": data.pixels.numBlocksY,\n          \"numBytes\": data.pixels.numBytes,\n          \"maxValue\": data.pixels.maxValue,\n          \"noDataValue\": data.noDataValue\n        }\n      };\n    };\n\n    var computeUsedBitDepths = function(data) {\n      var numBlocks = data.pixels.numBlocksX * data.pixels.numBlocksY;\n      var bitDepths = {};\n      for (var i = 0; i < numBlocks; i++) {\n        var block = data.pixels.blocks[i];\n        if (block.encoding === 0) {\n          bitDepths.float32 = true;\n        } else if (block.encoding === 1) {\n          bitDepths[block.bitsPerPixel] = true;\n        } else {\n          bitDepths[0] = true;\n        }\n      }\n\n      return Object.keys(bitDepths);\n    };\n\n    var parse = function(input, fp, skipMask) {\n      var data = {};\n\n      // File header\n      var fileIdView = new Uint8Array(input, fp, 10);\n      data.fileIdentifierString = String.fromCharCode.apply(null, fileIdView);\n      if (data.fileIdentifierString.trim() !== \"CntZImage\") {\n        throw \"Unexpected file identifier string: \" + data.fileIdentifierString;\n      }\n      fp += 10;\n      var view = new DataView(input, fp, 24);\n      data.fileVersion = view.getInt32(0, true);\n      data.imageType = view.getInt32(4, true);\n      data.height = view.getUint32(8, true);\n      data.width = view.getUint32(12, true);\n      data.maxZError = view.getFloat64(16, true);\n      fp += 24;\n\n      // Mask Header\n      if (!skipMask) {\n        view = new DataView(input, fp, 16);\n        data.mask = {};\n        data.mask.numBlocksY = view.getUint32(0, true);\n        data.mask.numBlocksX = view.getUint32(4, true);\n        data.mask.numBytes = view.getUint32(8, true);\n        data.mask.maxValue = view.getFloat32(12, true);\n        fp += 16;\n\n        // Mask Data\n        if (data.mask.numBytes > 0) {\n          var bitset = new Uint8Array(Math.ceil(data.width * data.height / 8));\n          view = new DataView(input, fp, data.mask.numBytes);\n          var cnt = view.getInt16(0, true);\n          var ip = 2, op = 0;\n          do {\n            if (cnt > 0) {\n              while (cnt--) { bitset[op++] = view.getUint8(ip++); }\n            } else {\n              var val = view.getUint8(ip++);\n              cnt = -cnt;\n              while (cnt--) { bitset[op++] = val; }\n            }\n            cnt = view.getInt16(ip, true);\n            ip += 2;\n          } while (ip < data.mask.numBytes);\n          if ((cnt !== -32768) || (op < bitset.length)) {\n            throw \"Unexpected end of mask RLE encoding\";\n          }\n          data.mask.bitset = bitset;\n          fp += data.mask.numBytes;\n        }\n        else if ((data.mask.numBytes | data.mask.numBlocksY | data.mask.maxValue) === 0) {  // Special case, all nodata\n          data.mask.bitset = new Uint8Array(Math.ceil(data.width * data.height / 8));\n        }\n      }\n\n      // Pixel Header\n      view = new DataView(input, fp, 16);\n      data.pixels = {};\n      data.pixels.numBlocksY = view.getUint32(0, true);\n      data.pixels.numBlocksX = view.getUint32(4, true);\n      data.pixels.numBytes = view.getUint32(8, true);\n      data.pixels.maxValue = view.getFloat32(12, true);\n      fp += 16;\n\n      var numBlocksX = data.pixels.numBlocksX;\n      var numBlocksY = data.pixels.numBlocksY;\n      // the number of blocks specified in the header does not take into account the blocks at the end of\n      // each row/column with a special width/height that make the image complete in case the width is not\n      // evenly divisible by the number of blocks.\n      var actualNumBlocksX = numBlocksX + ((data.width % numBlocksX) > 0 ? 1 : 0);\n      var actualNumBlocksY = numBlocksY + ((data.height % numBlocksY) > 0 ? 1 : 0);\n      data.pixels.blocks = new Array(actualNumBlocksX * actualNumBlocksY);\n      var blockI = 0;\n      for (var blockY = 0; blockY < actualNumBlocksY; blockY++) {\n        for (var blockX = 0; blockX < actualNumBlocksX; blockX++) {\n\n          // Block\n          var size = 0;\n          var bytesLeft = input.byteLength - fp;\n          view = new DataView(input, fp, Math.min(10, bytesLeft));\n          var block = {};\n          data.pixels.blocks[blockI++] = block;\n          var headerByte = view.getUint8(0); size++;\n          block.encoding = headerByte & 63;\n          if (block.encoding > 3) {\n            throw \"Invalid block encoding (\" + block.encoding + \")\";\n          }\n          if (block.encoding === 2) {\n            fp++;\n            continue;\n          }\n          if ((headerByte !== 0) && (headerByte !== 2)) {\n            headerByte >>= 6;\n            block.offsetType = headerByte;\n            if (headerByte === 2) {\n              block.offset = view.getInt8(1); size++;\n            } else if (headerByte === 1) {\n              block.offset = view.getInt16(1, true); size += 2;\n            } else if (headerByte === 0) {\n              block.offset = view.getFloat32(1, true); size += 4;\n            } else {\n              throw \"Invalid block offset type\";\n            }\n\n            if (block.encoding === 1) {\n              headerByte = view.getUint8(size); size++;\n              block.bitsPerPixel = headerByte & 63;\n              headerByte >>= 6;\n              block.numValidPixelsType = headerByte;\n              if (headerByte === 2) {\n                block.numValidPixels = view.getUint8(size); size++;\n              } else if (headerByte === 1) {\n                block.numValidPixels = view.getUint16(size, true); size += 2;\n              } else if (headerByte === 0) {\n                block.numValidPixels = view.getUint32(size, true); size += 4;\n              } else {\n                throw \"Invalid valid pixel count type\";\n              }\n            }\n          }\n          fp += size;\n\n          if (block.encoding === 3) {\n            continue;\n          }\n\n          var arrayBuf, store8;\n          if (block.encoding === 0) {\n            var numPixels = (data.pixels.numBytes - 1) / 4;\n            if (numPixels !== Math.floor(numPixels)) {\n              throw \"uncompressed block has invalid length\";\n            }\n            arrayBuf = new ArrayBuffer(numPixels * 4);\n            store8 = new Uint8Array(arrayBuf);\n            store8.set(new Uint8Array(input, fp, numPixels * 4));\n            var rawData = new Float32Array(arrayBuf);\n            block.rawData = rawData;\n            fp += numPixels * 4;\n          } else if (block.encoding === 1) {\n            var dataBytes = Math.ceil(block.numValidPixels * block.bitsPerPixel / 8);\n            var dataWords = Math.ceil(dataBytes / 4);\n            arrayBuf = new ArrayBuffer(dataWords * 4);\n            store8 = new Uint8Array(arrayBuf);\n            store8.set(new Uint8Array(input, fp, dataBytes));\n            block.stuffedData = new Uint32Array(arrayBuf);\n            fp += dataBytes;\n          }\n        }\n      }\n      data.eofOffset = fp;\n      return data;\n    };\n\n    var unstuff = function(src, bitsPerPixel, numPixels, offset, scale, dest, maxValue) {\n      var bitMask = (1 << bitsPerPixel) - 1;\n      var i = 0, o;\n      var bitsLeft = 0;\n      var n, buffer;\n      var nmax = Math.ceil((maxValue - offset) / scale);\n      // get rid of trailing bytes that are already part of next block\n      var numInvalidTailBytes = src.length * 4 - Math.ceil(bitsPerPixel * numPixels / 8);\n      src[src.length - 1] <<= 8 * numInvalidTailBytes;\n\n      for (o = 0; o < numPixels; o++) {\n        if (bitsLeft === 0) {\n          buffer = src[i++];\n          bitsLeft = 32;\n        }\n        if (bitsLeft >= bitsPerPixel) {\n          n = (buffer >>> (bitsLeft - bitsPerPixel)) & bitMask;\n          bitsLeft -= bitsPerPixel;\n        } else {\n          var missingBits = (bitsPerPixel - bitsLeft);\n          n = ((buffer & bitMask) << missingBits) & bitMask;\n          buffer = src[i++];\n          bitsLeft = 32 - missingBits;\n          n += (buffer >>> bitsLeft);\n        }\n        //pixel values may exceed max due to quantization\n        dest[o] = n < nmax ? offset + n * scale : maxValue;\n      }\n      return dest;\n    };\n\n    return CntZImage;\n  })();\n\n  //version 2. Supports 2.1, 2.2, 2.3\n  var Lerc2Decode = (function() {\n    \"use strict\";\n    // Note: currently, this module only has an implementation for decoding LERC data, not encoding. The name of\n    // the class was chosen to be future proof, following LercDecode.\n\n    /*****************************************\n    * private static class bitsutffer used by Lerc2Decode\n    *******************************************/\n    var BitStuffer = {\n      //methods ending with 2 are for the new byte order used by Lerc2.3 and above.\n      //originalUnstuff is used to unpack Huffman code table. code is duplicated to unstuffx for performance reasons.\n      unstuff: function(src, dest, bitsPerPixel, numPixels, lutArr, offset, scale, maxValue) {\n        var bitMask = (1 << bitsPerPixel) - 1;\n        var i = 0, o;\n        var bitsLeft = 0;\n        var n, buffer, missingBits, nmax;\n\n        // get rid of trailing bytes that are already part of next block\n        var numInvalidTailBytes = src.length * 4 - Math.ceil(bitsPerPixel * numPixels / 8);\n        src[src.length - 1] <<= 8 * numInvalidTailBytes;\n        if (lutArr) {\n          for (o = 0; o < numPixels; o++) {\n            if (bitsLeft === 0) {\n              buffer = src[i++];\n              bitsLeft = 32;\n            }\n            if (bitsLeft >= bitsPerPixel) {\n              n = (buffer >>> (bitsLeft - bitsPerPixel)) & bitMask;\n              bitsLeft -= bitsPerPixel;\n            }\n            else {\n              missingBits = (bitsPerPixel - bitsLeft);\n              n = ((buffer & bitMask) << missingBits) & bitMask;\n              buffer = src[i++];\n              bitsLeft = 32 - missingBits;\n              n += (buffer >>> bitsLeft);\n            }\n            dest[o] = lutArr[n];//offset + lutArr[n] * scale;\n          }\n        }\n        else {\n          nmax = Math.ceil((maxValue - offset) / scale);\n          for (o = 0; o < numPixels; o++) {\n            if (bitsLeft === 0) {\n              buffer = src[i++];\n              bitsLeft = 32;\n            }\n            if (bitsLeft >= bitsPerPixel) {\n              n = (buffer >>> (bitsLeft - bitsPerPixel)) & bitMask;\n              bitsLeft -= bitsPerPixel;\n            }\n            else {\n              missingBits = (bitsPerPixel - bitsLeft);\n              n = ((buffer & bitMask) << missingBits) & bitMask;\n              buffer = src[i++];\n              bitsLeft = 32 - missingBits;\n              n += (buffer >>> bitsLeft);\n            }\n            //pixel values may exceed max due to quantization\n            dest[o] = n < nmax ? offset + n * scale : maxValue;\n          }\n        }\n      },\n\n      unstuffLUT: function(src, bitsPerPixel, numPixels, offset, scale, maxValue) {\n        var bitMask = (1 << bitsPerPixel) - 1;\n        var i = 0, o = 0, missingBits = 0, bitsLeft = 0, n = 0;\n        var buffer;\n        var dest = [];\n\n        // get rid of trailing bytes that are already part of next block\n        var numInvalidTailBytes = src.length * 4 - Math.ceil(bitsPerPixel * numPixels / 8);\n        src[src.length - 1] <<= 8 * numInvalidTailBytes;\n\n        var nmax = Math.ceil((maxValue - offset) / scale);\n        for (o = 0; o < numPixels; o++) {\n          if (bitsLeft === 0) {\n            buffer = src[i++];\n            bitsLeft = 32;\n          }\n          if (bitsLeft >= bitsPerPixel) {\n            n = (buffer >>> (bitsLeft - bitsPerPixel)) & bitMask;\n            bitsLeft -= bitsPerPixel;\n          } else {\n            missingBits = (bitsPerPixel - bitsLeft);\n            n = ((buffer & bitMask) << missingBits) & bitMask;\n            buffer = src[i++];\n            bitsLeft = 32 - missingBits;\n            n += (buffer >>> bitsLeft);\n          }\n          //dest.push(n);\n          dest[o] = n < nmax ? offset + n * scale : maxValue;\n        }\n        dest.unshift(offset);//1st one\n        return dest;\n      },\n\n      unstuff2: function(src, dest, bitsPerPixel, numPixels, lutArr, offset, scale, maxValue) {\n        var bitMask = (1 << bitsPerPixel) - 1;\n        var i = 0, o;\n        var bitsLeft = 0, bitPos = 0;\n        var n, buffer, missingBits;\n        if (lutArr) {\n          for (o = 0; o < numPixels; o++) {\n            if (bitsLeft === 0) {\n              buffer = src[i++];\n              bitsLeft = 32;\n              bitPos = 0;\n            }\n            if (bitsLeft >= bitsPerPixel) {\n              n = ((buffer >>> bitPos) & bitMask);\n              bitsLeft -= bitsPerPixel;\n              bitPos += bitsPerPixel;\n            } else {\n              missingBits = (bitsPerPixel - bitsLeft);\n              n = (buffer >>> bitPos) & bitMask;\n              buffer = src[i++];\n              bitsLeft = 32 - missingBits;\n              n |= (buffer & ((1 << missingBits) - 1)) << (bitsPerPixel - missingBits);\n              bitPos = missingBits;\n            }\n            dest[o] = lutArr[n];\n          }\n        }\n        else {\n          var nmax = Math.ceil((maxValue - offset) / scale);\n          for (o = 0; o < numPixels; o++) {\n            if (bitsLeft === 0) {\n              buffer = src[i++];\n              bitsLeft = 32;\n              bitPos = 0;\n            }\n            if (bitsLeft >= bitsPerPixel) {\n              //no unsigned left shift\n              n = ((buffer >>> bitPos) & bitMask);\n              bitsLeft -= bitsPerPixel;\n              bitPos += bitsPerPixel;\n            } else {\n              missingBits = (bitsPerPixel - bitsLeft);\n              n = (buffer >>> bitPos) & bitMask;//((buffer & bitMask) << missingBits) & bitMask;\n              buffer = src[i++];\n              bitsLeft = 32 - missingBits;\n              n |= (buffer & ((1 << missingBits) - 1)) << (bitsPerPixel - missingBits);\n              bitPos = missingBits;\n            }\n            //pixel values may exceed max due to quantization\n            dest[o] = n < nmax ? offset + n * scale : maxValue;\n          }\n        }\n        return dest;\n      },\n\n      unstuffLUT2: function(src, bitsPerPixel, numPixels, offset, scale, maxValue) {\n        var bitMask = (1 << bitsPerPixel) - 1;\n        var i = 0, o = 0, missingBits = 0, bitsLeft = 0, n = 0, bitPos = 0;\n        var buffer;\n        var dest = [];\n        var nmax = Math.ceil((maxValue - offset) / scale);\n        for (o = 0; o < numPixels; o++) {\n          if (bitsLeft === 0) {\n            buffer = src[i++];\n            bitsLeft = 32;\n            bitPos = 0;\n          }\n          if (bitsLeft >= bitsPerPixel) {\n            //no unsigned left shift\n            n = ((buffer >>> bitPos) & bitMask);\n            bitsLeft -= bitsPerPixel;\n            bitPos += bitsPerPixel;\n          } else {\n            missingBits = (bitsPerPixel - bitsLeft);\n            n = (buffer >>> bitPos) & bitMask;//((buffer & bitMask) << missingBits) & bitMask;\n            buffer = src[i++];\n            bitsLeft = 32 - missingBits;\n            n |= (buffer & ((1 << missingBits) - 1)) << (bitsPerPixel - missingBits);\n            bitPos = missingBits;\n          }\n          //dest.push(n);\n          dest[o] = n < nmax ? offset + n * scale : maxValue;\n        }\n        dest.unshift(offset);\n        return dest;\n      },\n\n      originalUnstuff: function(src, dest, bitsPerPixel, numPixels) {\n        var bitMask = (1 << bitsPerPixel) - 1;\n        var i = 0, o;\n        var bitsLeft = 0;\n        var n, buffer, missingBits;\n\n        // get rid of trailing bytes that are already part of next block\n        var numInvalidTailBytes = src.length * 4 - Math.ceil(bitsPerPixel * numPixels / 8);\n        src[src.length - 1] <<= 8 * numInvalidTailBytes;\n\n        for (o = 0; o < numPixels; o++) {\n          if (bitsLeft === 0) {\n            buffer = src[i++];\n            bitsLeft = 32;\n          }\n          if (bitsLeft >= bitsPerPixel) {\n            n = (buffer >>> (bitsLeft - bitsPerPixel)) & bitMask;\n            bitsLeft -= bitsPerPixel;\n          }\n          else {\n            missingBits = (bitsPerPixel - bitsLeft);\n            n = ((buffer & bitMask) << missingBits) & bitMask;\n            buffer = src[i++];\n            bitsLeft = 32 - missingBits;\n            n += (buffer >>> bitsLeft);\n          }\n          dest[o] = n;\n        }\n        return dest;\n      },\n\n      originalUnstuff2: function(src, dest, bitsPerPixel, numPixels) {\n        var bitMask = (1 << bitsPerPixel) - 1;\n        var i = 0, o;\n        var bitsLeft = 0, bitPos = 0;\n        var n, buffer, missingBits;\n        //micro-optimizations\n        for (o = 0; o < numPixels; o++) {\n          if (bitsLeft === 0) {\n            buffer = src[i++];\n            bitsLeft = 32;\n            bitPos = 0;\n          }\n          if (bitsLeft >= bitsPerPixel) {\n            //no unsigned left shift\n            n = ((buffer >>> bitPos) & bitMask);\n            bitsLeft -= bitsPerPixel;\n            bitPos += bitsPerPixel;\n          } else {\n            missingBits = (bitsPerPixel - bitsLeft);\n            n = (buffer >>> bitPos) & bitMask;//((buffer & bitMask) << missingBits) & bitMask;\n            buffer = src[i++];\n            bitsLeft = 32 - missingBits;\n            n |= (buffer & ((1 << missingBits) - 1)) << (bitsPerPixel - missingBits);\n            bitPos = missingBits;\n          }\n          dest[o] = n;\n        }\n        return dest;\n      }\n    };\n\n    /*****************************************\n    *private static class used by Lerc2Decode\n    ******************************************/\n    var Lerc2Helpers = {\n      HUFFMAN_LUT_BITS_MAX: 12, //use 2^12 lut, treat it like constant\n      computeChecksumFletcher32: function(input) {\n\n        var sum1 = 0xffff, sum2 = 0xffff;\n        var len = input.length;\n        var words = Math.floor(len / 2);\n        var i = 0;\n        while (words) {\n          var tlen = (words >= 359) ? 359 : words;\n          words -= tlen;\n          do {\n            sum1 += (input[i++] << 8);\n            sum2 += sum1 += input[i++];\n          } while (--tlen);\n\n          sum1 = (sum1 & 0xffff) + (sum1 >>> 16);\n          sum2 = (sum2 & 0xffff) + (sum2 >>> 16);\n        }\n\n        // add the straggler byte if it exists\n        if (len & 1) {\n          sum2 += sum1 += (input[i] << 8);\n        }\n        // second reduction step to reduce sums to 16 bits\n        sum1 = (sum1 & 0xffff) + (sum1 >>> 16);\n        sum2 = (sum2 & 0xffff) + (sum2 >>> 16);\n\n        return (sum2 << 16 | sum1) >>> 0;\n      },\n\n      readHeaderInfo: function(input, data) {\n        var ptr = data.ptr;\n        var fileIdView = new Uint8Array(input, ptr, 6);\n        var headerInfo = {};\n        headerInfo.fileIdentifierString = String.fromCharCode.apply(null, fileIdView);\n        if (headerInfo.fileIdentifierString.lastIndexOf(\"Lerc2\", 0) !== 0) {\n          throw \"Unexpected file identifier string (expect Lerc2 ): \" + headerInfo.fileIdentifierString;\n        }\n        ptr += 6;\n        var view = new DataView(input, ptr, 8);\n        var fileVersion = view.getInt32(0, true);\n        headerInfo.fileVersion = fileVersion;\n        ptr += 4;\n        if (fileVersion >= 3) {\n          headerInfo.checksum = view.getUint32(4, true); //nrows\n          ptr += 4;\n        }\n\n        //keys start from here\n        view = new DataView(input, ptr, 12);\n        headerInfo.height = view.getUint32(0, true); //nrows\n        headerInfo.width = view.getUint32(4, true); //ncols\n        ptr += 8;\n        if (fileVersion >= 4) {\n          headerInfo.numDims = view.getUint32(8, true);\n          ptr += 4;\n        }\n        else {\n          headerInfo.numDims = 1;\n        }\n\n        view = new DataView(input, ptr, 40);\n        headerInfo.numValidPixel = view.getUint32(0, true);\n        headerInfo.microBlockSize = view.getInt32(4, true);\n        headerInfo.blobSize = view.getInt32(8, true);\n        headerInfo.imageType = view.getInt32(12, true);\n\n        headerInfo.maxZError = view.getFloat64(16, true);\n        headerInfo.zMin = view.getFloat64(24, true);\n        headerInfo.zMax = view.getFloat64(32, true);\n        ptr += 40;\n        data.headerInfo = headerInfo;\n        data.ptr = ptr;\n\n        var checksum, keyLength;\n        if (fileVersion >= 3) {\n          keyLength = fileVersion >= 4 ? 52 : 48;\n          checksum = this.computeChecksumFletcher32(new Uint8Array(input, ptr - keyLength, headerInfo.blobSize - 14));\n          if (checksum !== headerInfo.checksum) {\n            throw \"Checksum failed.\";\n          }\n        }\n        return true;\n      },\n\n      checkMinMaxRanges: function(input, data) {\n        var headerInfo = data.headerInfo;\n        var OutPixelTypeArray = this.getDataTypeArray(headerInfo.imageType);\n        var rangeBytes = headerInfo.numDims * this.getDataTypeSize(headerInfo.imageType);\n        var minValues = this.readSubArray(input, data.ptr, OutPixelTypeArray, rangeBytes);\n        var maxValues = this.readSubArray(input, data.ptr + rangeBytes, OutPixelTypeArray, rangeBytes);\n        data.ptr += (2 * rangeBytes);\n        var i, equal = true;\n        for (i = 0; i < headerInfo.numDims; i++) {\n          if (minValues[i] !== maxValues[i]) {\n            equal = false;\n            break;\n          }\n        }\n        headerInfo.minValues = minValues;\n        headerInfo.maxValues = maxValues;\n        return equal;\n      },\n\n      readSubArray: function(input, ptr, OutPixelTypeArray, numBytes) {\n        var rawData;\n        if (OutPixelTypeArray === Uint8Array) {\n          rawData = new Uint8Array(input, ptr, numBytes);\n        }\n        else {\n          var arrayBuf = new ArrayBuffer(numBytes);\n          var store8 = new Uint8Array(arrayBuf);\n          store8.set(new Uint8Array(input, ptr, numBytes));\n          rawData = new OutPixelTypeArray(arrayBuf);\n        }\n        return rawData;\n      },\n\n      readMask: function(input, data) {\n        var ptr = data.ptr;\n        var headerInfo = data.headerInfo;\n        var numPixels = headerInfo.width * headerInfo.height;\n        var numValidPixel = headerInfo.numValidPixel;\n\n        var view = new DataView(input, ptr, 4);\n        var mask = {};\n        mask.numBytes = view.getUint32(0, true);\n        ptr += 4;\n\n        // Mask Data\n        if ((0 === numValidPixel || numPixels === numValidPixel) && 0 !== mask.numBytes) {\n          throw (\"invalid mask\");\n        }\n        var bitset, resultMask;\n        if (numValidPixel === 0) {\n          bitset = new Uint8Array(Math.ceil(numPixels / 8));\n          mask.bitset = bitset;\n          resultMask = new Uint8Array(numPixels);\n          data.pixels.resultMask = resultMask;\n          ptr += mask.numBytes;\n        }// ????? else if (data.mask.numBytes > 0 && data.mask.numBytes< data.numValidPixel) {\n        else if (mask.numBytes > 0) {\n          bitset = new Uint8Array(Math.ceil(numPixels / 8));\n          view = new DataView(input, ptr, mask.numBytes);\n          var cnt = view.getInt16(0, true);\n          var ip = 2, op = 0, val = 0;\n          do {\n            if (cnt > 0) {\n              while (cnt--) { bitset[op++] = view.getUint8(ip++); }\n            } else {\n              val = view.getUint8(ip++);\n              cnt = -cnt;\n              while (cnt--) { bitset[op++] = val; }\n            }\n            cnt = view.getInt16(ip, true);\n            ip += 2;\n          } while (ip < mask.numBytes);\n          if ((cnt !== -32768) || (op < bitset.length)) {\n            throw \"Unexpected end of mask RLE encoding\";\n          }\n\n          resultMask = new Uint8Array(numPixels);\n          var mb = 0, k = 0;\n\n          for (k = 0; k < numPixels; k++) {\n            if (k & 7) {\n              mb = bitset[k >> 3];\n              mb <<= k & 7;\n            }\n            else {\n              mb = bitset[k >> 3];\n            }\n            if (mb & 128) {\n              resultMask[k] = 1;\n            }\n          }\n          data.pixels.resultMask = resultMask;\n\n          mask.bitset = bitset;\n          ptr += mask.numBytes;\n        }\n        data.ptr = ptr;\n        data.mask = mask;\n        return true;\n      },\n\n      readDataOneSweep: function(input, data, OutPixelTypeArray, useBSQForOutputDim) {\n        var ptr = data.ptr;\n        var headerInfo = data.headerInfo;\n        var numDims = headerInfo.numDims;\n        var numPixels = headerInfo.width * headerInfo.height;\n        var imageType = headerInfo.imageType;\n        var numBytes = headerInfo.numValidPixel * Lerc2Helpers.getDataTypeSize(imageType) * numDims;\n        //data.pixels.numBytes = numBytes;\n        var rawData;\n        var mask = data.pixels.resultMask;\n        if (OutPixelTypeArray === Uint8Array) {\n          rawData = new Uint8Array(input, ptr, numBytes);\n        }\n        else {\n          var arrayBuf = new ArrayBuffer(numBytes);\n          var store8 = new Uint8Array(arrayBuf);\n          store8.set(new Uint8Array(input, ptr, numBytes));\n          rawData = new OutPixelTypeArray(arrayBuf);\n        }\n        if (rawData.length === numPixels * numDims) {\n          if (useBSQForOutputDim) {\n            data.pixels.resultPixels = Lerc2Helpers.swapDimensionOrder(rawData, numPixels, numDims, OutPixelTypeArray, true);\n          }\n          else {\n            data.pixels.resultPixels = rawData;\n          }\n        }\n        else  //mask\n        {\n          data.pixels.resultPixels = new OutPixelTypeArray(numPixels * numDims);\n          var z = 0, k = 0, i = 0, nStart = 0;\n          if (numDims > 1) {\n            if (useBSQForOutputDim) {\n              for (k = 0; k < numPixels; k++) {\n                if (mask[k]) {\n                  nStart = k;\n                  for (i = 0; i < numDims; i++, nStart+=numPixels) {\n                    data.pixels.resultPixels[nStart] = rawData[z++];\n                  }\n                }\n              }\n            }\n            else {\n              for (k = 0; k < numPixels; k++) {\n                if (mask[k]) {\n                  nStart = k * numDims;\n                  for (i = 0; i < numDims; i++) {\n                    data.pixels.resultPixels[nStart + i] = rawData[z++];\n                  }\n                }\n              }\n            }\n          }\n          else {\n            for (k = 0; k < numPixels; k++) {\n              if (mask[k]) {\n                data.pixels.resultPixels[k] = rawData[z++];\n              }\n            }\n          }\n        }\n        ptr += numBytes;\n        data.ptr = ptr;       //return data;\n        return true;\n      },\n\n      readHuffmanTree: function(input, data) {\n        var BITS_MAX = this.HUFFMAN_LUT_BITS_MAX; //8 is slow for the large test image\n        //var size_max = 1 << BITS_MAX;\n        /* ************************\n        * reading code table\n        *************************/\n        var view = new DataView(input, data.ptr, 16);\n        data.ptr += 16;\n        var version = view.getInt32(0, true);\n        if (version < 2) {\n          throw \"unsupported Huffman version\";\n        }\n        var size = view.getInt32(4, true);\n        var i0 = view.getInt32(8, true);\n        var i1 = view.getInt32(12, true);\n        if (i0 >= i1) {\n          return false;\n        }\n        var blockDataBuffer = new Uint32Array(i1 - i0);\n        Lerc2Helpers.decodeBits(input, data, blockDataBuffer);\n        var codeTable = []; //size\n        var i, j, k, len;\n\n        for (i = i0; i < i1; i++) {\n          j = i - (i < size ? 0 : size);//wrap around\n          codeTable[j] = { first: blockDataBuffer[i - i0], second: null };\n        }\n\n        var dataBytes = input.byteLength - data.ptr;\n        var dataWords = Math.ceil(dataBytes / 4);\n        var arrayBuf = new ArrayBuffer(dataWords * 4);\n        var store8 = new Uint8Array(arrayBuf);\n        store8.set(new Uint8Array(input, data.ptr, dataBytes));\n        var stuffedData = new Uint32Array(arrayBuf); //must start from x*4\n        var bitPos = 0, word, srcPtr = 0;\n        word = stuffedData[0];\n        for (i = i0; i < i1; i++) {\n          j = i - (i < size ? 0 : size);//wrap around\n          len = codeTable[j].first;\n          if (len > 0) {\n            codeTable[j].second = (word << bitPos) >>> (32 - len);\n\n            if (32 - bitPos >= len) {\n              bitPos += len;\n              if (bitPos === 32) {\n                bitPos = 0;\n                srcPtr++;\n                word = stuffedData[srcPtr];\n              }\n            }\n            else {\n              bitPos += len - 32;\n              srcPtr++;\n              word = stuffedData[srcPtr];\n              codeTable[j].second |= word >>> (32 - bitPos);\n            }\n          }\n        }\n\n        //finished reading code table\n\n        /* ************************\n        * building lut\n        *************************/\n        var numBitsLUT = 0, numBitsLUTQick = 0;\n        var tree = new TreeNode();\n        for (i = 0; i < codeTable.length; i++) {\n          if (codeTable[i] !== undefined) {\n            numBitsLUT = Math.max(numBitsLUT, codeTable[i].first);\n          }\n        }\n        if (numBitsLUT >= BITS_MAX) {\n          numBitsLUTQick = BITS_MAX;\n        }\n        else {\n          numBitsLUTQick = numBitsLUT;\n        }\n        // for debugging purpose\n        // if (numBitsLUT >= 30) {\n        //   console.log(\"WARning, large NUM LUT BITS IS \" + numBitsLUT);\n        // }\n        var decodeLut = [], entry, code, numEntries, jj, currentBit, node;\n        for (i = i0; i < i1; i++) {\n          j = i - (i < size ? 0 : size);//wrap around\n          len = codeTable[j].first;\n          if (len > 0) {\n            entry = [len, j];\n            if (len <= numBitsLUTQick) {\n              code = codeTable[j].second << (numBitsLUTQick - len);\n              numEntries = 1 << (numBitsLUTQick - len);\n              for (k = 0; k < numEntries; k++) {\n                decodeLut[code | k] = entry;\n              }\n            }\n            else {\n              //build tree\n              code = codeTable[j].second;\n              node = tree;\n              for (jj = len - 1; jj >= 0; jj--) {\n                currentBit = code >>> jj & 1; //no left shift as length could be 30,31\n                if (currentBit) {\n                  if (!node.right) {\n                    node.right = new TreeNode();\n                  }\n                  node = node.right;\n                }\n                else {\n                  if (!node.left) {\n                    node.left = new TreeNode();\n                  }\n                  node = node.left;\n                }\n                if (jj === 0 && !node.val) {\n                  node.val = entry[1];\n                }\n              }\n            }\n          }\n        }\n        return {\n          decodeLut: decodeLut,\n          numBitsLUTQick: numBitsLUTQick,\n          numBitsLUT: numBitsLUT,\n          tree: tree,\n          stuffedData: stuffedData,\n          srcPtr: srcPtr,\n          bitPos: bitPos\n        };\n      },\n\n      readHuffman: function(input, data, OutPixelTypeArray, useBSQForOutputDim) {\n        var headerInfo = data.headerInfo;\n        var numDims = headerInfo.numDims;\n        var height = data.headerInfo.height;\n        var width = data.headerInfo.width;\n        var numPixels = width * height;\n        //var size_max = 1 << BITS_MAX;\n        /* ************************\n        * reading huffman structure info\n        *************************/\n        var huffmanInfo = this.readHuffmanTree(input, data);\n        var decodeLut = huffmanInfo.decodeLut;\n        var tree = huffmanInfo.tree;\n        //stuffedData includes huffman headers\n        var stuffedData = huffmanInfo.stuffedData;\n        var srcPtr = huffmanInfo.srcPtr;\n        var bitPos = huffmanInfo.bitPos;\n        var numBitsLUTQick = huffmanInfo.numBitsLUTQick;\n        var numBitsLUT = huffmanInfo.numBitsLUT;\n        var offset = data.headerInfo.imageType === 0 ? 128 : 0;\n        /*************************\n        *  decode\n        ***************************/\n        var node, val, delta, mask = data.pixels.resultMask, valTmp, valTmpQuick, currentBit;\n        var i, j, k, ii;\n        var prevVal = 0;\n        if (bitPos > 0) {\n          srcPtr++;\n          bitPos = 0;\n        }\n        var word = stuffedData[srcPtr];\n        var deltaEncode = data.encodeMode === 1;\n        var resultPixelsAllDim = new OutPixelTypeArray(numPixels * numDims);\n        var resultPixels = resultPixelsAllDim;\n        var iDim;\n        // TODO: reevaluate the need to keep inlined decoding code as IE support is phasing out\n        if (numDims < 2 || deltaEncode) {\n          for (iDim = 0; iDim < numDims; iDim++) {\n            if (numDims > 1) {\n              //get the mem block of current dimension\n              resultPixels = new OutPixelTypeArray(resultPixelsAllDim.buffer, numPixels * iDim, numPixels);\n              prevVal = 0;\n            }\n            if (data.headerInfo.numValidPixel === width * height) { //all valid\n              for (k = 0, i = 0; i < height; i++) {\n                for (j = 0; j < width; j++, k++) {\n                  val = 0;\n                  valTmp = (word << bitPos) >>> (32 - numBitsLUTQick);\n                  valTmpQuick = valTmp;// >>> deltaBits;\n                  if (32 - bitPos < numBitsLUTQick) {\n                    valTmp |= ((stuffedData[srcPtr + 1]) >>> (64 - bitPos - numBitsLUTQick));\n                    valTmpQuick = valTmp;// >>> deltaBits;\n                  }\n                  if (decodeLut[valTmpQuick])    // if there, move the correct number of bits and done\n                  {\n                    val = decodeLut[valTmpQuick][1];\n                    bitPos += decodeLut[valTmpQuick][0];\n                  }\n                  else {\n                    valTmp = (word << bitPos) >>> (32 - numBitsLUT);\n                    valTmpQuick = valTmp;// >>> deltaBits;\n                    if (32 - bitPos < numBitsLUT) {\n                      valTmp |= ((stuffedData[srcPtr + 1]) >>> (64 - bitPos - numBitsLUT));\n                      valTmpQuick = valTmp;// >>> deltaBits;\n                    }\n                    node = tree;\n                    for (ii = 0; ii < numBitsLUT; ii++) {\n                      currentBit = valTmp >>> (numBitsLUT - ii - 1) & 1;\n                      node = currentBit ? node.right : node.left;\n                      if (!(node.left || node.right)) {\n                        val = node.val;\n                        bitPos = bitPos + ii + 1;\n                        break;\n                      }\n                    }\n                  }\n    \n                  if (bitPos >= 32) {\n                    bitPos -= 32;\n                    srcPtr++;\n                    word = stuffedData[srcPtr];\n                  }\n    \n                  delta = val - offset;\n                  if (deltaEncode) {\n                    if (j > 0) {\n                      delta += prevVal;    // use overflow\n                    }\n                    else if (i > 0) {\n                      delta += resultPixels[k - width];\n                    }\n                    else {\n                      delta += prevVal;\n                    }\n                    delta &= 0xFF; //overflow\n                    resultPixels[k] = delta;//overflow\n                    prevVal = delta;\n                  }\n                  else {\n                    resultPixels[k] = delta;\n                  }\n                }\n              }\n            }\n            else { //not all valid, use mask\n              for (k = 0, i = 0; i < height; i++) {\n                for (j = 0; j < width; j++, k++) {\n                  if (mask[k]) {\n                    val = 0;\n                    valTmp = (word << bitPos) >>> (32 - numBitsLUTQick);\n                    valTmpQuick = valTmp;// >>> deltaBits;\n                    if (32 - bitPos < numBitsLUTQick) {\n                      valTmp |= ((stuffedData[srcPtr + 1]) >>> (64 - bitPos - numBitsLUTQick));\n                      valTmpQuick = valTmp;// >>> deltaBits;\n                    }\n                    if (decodeLut[valTmpQuick])    // if there, move the correct number of bits and done\n                    {\n                      val = decodeLut[valTmpQuick][1];\n                      bitPos += decodeLut[valTmpQuick][0];\n                    }\n                    else {\n                      valTmp = (word << bitPos) >>> (32 - numBitsLUT);\n                      valTmpQuick = valTmp;// >>> deltaBits;\n                      if (32 - bitPos < numBitsLUT) {\n                        valTmp |= ((stuffedData[srcPtr + 1]) >>> (64 - bitPos - numBitsLUT));\n                        valTmpQuick = valTmp;// >>> deltaBits;\n                      }\n                      node = tree;\n                      for (ii = 0; ii < numBitsLUT; ii++) {\n                        currentBit = valTmp >>> (numBitsLUT - ii - 1) & 1;\n                        node = currentBit ? node.right : node.left;\n                        if (!(node.left || node.right)) {\n                          val = node.val;\n                          bitPos = bitPos + ii + 1;\n                          break;\n                        }\n                      }\n                    }\n    \n                    if (bitPos >= 32) {\n                      bitPos -= 32;\n                      srcPtr++;\n                      word = stuffedData[srcPtr];\n                    }\n    \n                    delta = val - offset;\n                    if (deltaEncode) {\n                      if (j > 0 && mask[k - 1]) {\n                        delta += prevVal;    // use overflow\n                      }\n                      else if (i > 0 && mask[k - width]) {\n                        delta += resultPixels[k - width];\n                      }\n                      else {\n                        delta += prevVal;\n                      }\n    \n                      delta &= 0xFF; //overflow\n                      resultPixels[k] = delta;//overflow\n                      prevVal = delta;\n                    }\n                    else {\n                      resultPixels[k] = delta;\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n        else {\n          for (k = 0, i = 0; i < height; i++) {\n            for (j = 0; j < width; j++) {\n              k = i * width + j;\n              if (!mask || mask[k]) {\n                for (iDim = 0; iDim < numDims; iDim++, k+=numPixels) {\n                  val = 0;\n                  valTmp = (word << bitPos) >>> (32 - numBitsLUTQick);\n                  valTmpQuick = valTmp;\n                  if (32 - bitPos < numBitsLUTQick) {\n                    valTmp |= ((stuffedData[srcPtr + 1]) >>> (64 - bitPos - numBitsLUTQick));\n                    valTmpQuick = valTmp;\n                  }\n                  if (decodeLut[valTmpQuick])\n                  {\n                    val = decodeLut[valTmpQuick][1];\n                    bitPos += decodeLut[valTmpQuick][0];\n                  }\n                  else {\n                    valTmp = (word << bitPos) >>> (32 - numBitsLUT);\n                    valTmpQuick = valTmp;\n                    if (32 - bitPos < numBitsLUT) {\n                      valTmp |= ((stuffedData[srcPtr + 1]) >>> (64 - bitPos - numBitsLUT));\n                      valTmpQuick = valTmp;\n                    }\n                    node = tree;\n                    for (ii = 0; ii < numBitsLUT; ii++) {\n                      currentBit = valTmp >>> (numBitsLUT - ii - 1) & 1;\n                      node = currentBit ? node.right : node.left;\n                      if (!(node.left || node.right)) {\n                        val = node.val;\n                        bitPos = bitPos + ii + 1;\n                        break;\n                      }\n                    }\n                  }\n\n                  if (bitPos >= 32) {\n                    bitPos -= 32;\n                    srcPtr++;\n                    word = stuffedData[srcPtr];\n                  }\n\n                  delta = val - offset;\n                  resultPixels[k] = delta;\n                }\n              }\n            }\n          }\n        }\n        data.ptr = data.ptr + (srcPtr + 1) * 4 + (bitPos > 0 ? 4 : 0);\n        data.pixels.resultPixels = resultPixelsAllDim;\n        //swap for BIP layout\n        if (numDims > 1 && !useBSQForOutputDim) {\n          data.pixels.resultPixels = Lerc2Helpers.swapDimensionOrder(resultPixelsAllDim, numPixels, numDims, OutPixelTypeArray);\n        }\n      },\n\n      decodeBits: function(input, data, blockDataBuffer, offset, iDim) {\n        {\n          //bitstuff encoding is 3\n          var headerInfo = data.headerInfo;\n          var fileVersion = headerInfo.fileVersion;\n          //var block = {};\n          var blockPtr = 0;\n          var viewByteLength = ((input.byteLength - data.ptr) >= 5) ? 5 : (input.byteLength - data.ptr);\n          var view = new DataView(input, data.ptr, viewByteLength);\n          var headerByte = view.getUint8(0);\n          blockPtr++;\n          var bits67 = headerByte >> 6;\n          var n = (bits67 === 0) ? 4 : 3 - bits67;\n          var doLut = (headerByte & 32) > 0 ? true : false;//5th bit\n          var numBits = headerByte & 31;\n          var numElements = 0;\n          if (n === 1) {\n            numElements = view.getUint8(blockPtr); blockPtr++;\n          } else if (n === 2) {\n            numElements = view.getUint16(blockPtr, true); blockPtr += 2;\n          } else if (n === 4) {\n            numElements = view.getUint32(blockPtr, true); blockPtr += 4;\n          } else {\n            throw \"Invalid valid pixel count type\";\n          }\n          //fix: huffman codes are bit stuffed, but not bound by data's max value, so need to use originalUnstuff\n          //offset = offset || 0;\n          var scale = 2 * headerInfo.maxZError;\n          var stuffedData, arrayBuf, store8, dataBytes, dataWords;\n          var lutArr, lutData, lutBytes, lutBitsPerElement, bitsPerPixel;\n          var zMax = headerInfo.numDims > 1 ? headerInfo.maxValues[iDim] : headerInfo.zMax;\n          if (doLut) {\n            data.counter.lut++;\n            lutBytes = view.getUint8(blockPtr);\n            lutBitsPerElement = numBits;\n            blockPtr++;\n            dataBytes = Math.ceil((lutBytes - 1) * numBits / 8);\n            dataWords = Math.ceil(dataBytes / 4);\n            arrayBuf = new ArrayBuffer(dataWords * 4);\n            store8 = new Uint8Array(arrayBuf);\n\n            data.ptr += blockPtr;\n            store8.set(new Uint8Array(input, data.ptr, dataBytes));\n\n            lutData = new Uint32Array(arrayBuf);\n            data.ptr += dataBytes;\n\n            bitsPerPixel = 0;\n            while ((lutBytes - 1) >>> bitsPerPixel) {\n              bitsPerPixel++;\n            }\n            dataBytes = Math.ceil(numElements * bitsPerPixel / 8);\n            dataWords = Math.ceil(dataBytes / 4);\n            arrayBuf = new ArrayBuffer(dataWords * 4);\n            store8 = new Uint8Array(arrayBuf);\n            store8.set(new Uint8Array(input, data.ptr, dataBytes));\n            stuffedData = new Uint32Array(arrayBuf);\n            data.ptr += dataBytes;\n            if (fileVersion >= 3) {\n              lutArr = BitStuffer.unstuffLUT2(lutData, numBits, lutBytes - 1, offset, scale, zMax);\n            }\n            else {\n              lutArr = BitStuffer.unstuffLUT(lutData, numBits, lutBytes - 1, offset, scale, zMax);\n            }\n            //lutArr.unshift(0);\n            if (fileVersion >= 3) {\n              //BitStuffer.unstuff2(block, blockDataBuffer, headerInfo.zMax);\n              BitStuffer.unstuff2(stuffedData, blockDataBuffer, bitsPerPixel, numElements, lutArr);\n            }\n            else {\n              BitStuffer.unstuff(stuffedData, blockDataBuffer, bitsPerPixel, numElements, lutArr);\n            }\n          }\n          else {\n            //console.debug(\"bitstuffer\");\n            data.counter.bitstuffer++;\n            bitsPerPixel = numBits;\n            data.ptr += blockPtr;\n            if (bitsPerPixel > 0) {\n              dataBytes = Math.ceil(numElements * bitsPerPixel / 8);\n              dataWords = Math.ceil(dataBytes / 4);\n              arrayBuf = new ArrayBuffer(dataWords * 4);\n              store8 = new Uint8Array(arrayBuf);\n              store8.set(new Uint8Array(input, data.ptr, dataBytes));\n              stuffedData = new Uint32Array(arrayBuf);\n              data.ptr += dataBytes;\n              if (fileVersion >= 3) {\n                if (offset == null) {\n                  BitStuffer.originalUnstuff2(stuffedData, blockDataBuffer, bitsPerPixel, numElements);\n                }\n                else {\n                  BitStuffer.unstuff2(stuffedData, blockDataBuffer, bitsPerPixel, numElements, false, offset, scale, zMax);\n                }\n              }\n              else {\n                if (offset == null) {\n                  BitStuffer.originalUnstuff(stuffedData, blockDataBuffer, bitsPerPixel, numElements);\n                }\n                else {\n                  BitStuffer.unstuff(stuffedData, blockDataBuffer, bitsPerPixel, numElements, false, offset, scale, zMax);\n                }\n              }\n            }\n          }\n        }\n\n      },\n\n      readTiles: function(input, data, OutPixelTypeArray, useBSQForOutputDim) {\n        var headerInfo = data.headerInfo;\n        var width = headerInfo.width;\n        var height = headerInfo.height;\n        var numPixels = width * height;\n        var microBlockSize = headerInfo.microBlockSize;\n        var imageType = headerInfo.imageType;\n        var dataTypeSize = Lerc2Helpers.getDataTypeSize(imageType);\n        var numBlocksX = Math.ceil(width / microBlockSize);\n        var numBlocksY = Math.ceil(height / microBlockSize);\n        data.pixels.numBlocksY = numBlocksY;\n        data.pixels.numBlocksX = numBlocksX;\n        data.pixels.ptr = 0;\n        var row = 0, col = 0, blockY = 0, blockX = 0, thisBlockHeight = 0, thisBlockWidth = 0, bytesLeft = 0, headerByte = 0, bits67 = 0, testCode = 0, outPtr = 0, outStride = 0, numBytes = 0, bytesleft = 0, z = 0, blockPtr = 0;\n        var view, block, arrayBuf, store8, rawData;\n        var blockEncoding;\n        var blockDataBuffer = new OutPixelTypeArray(microBlockSize * microBlockSize);\n        var lastBlockHeight = (height % microBlockSize) || microBlockSize;\n        var lastBlockWidth = (width % microBlockSize) || microBlockSize;\n        var offsetType, offset;\n        var numDims = headerInfo.numDims, iDim;\n        var mask = data.pixels.resultMask;\n        var resultPixels = data.pixels.resultPixels;\n        var fileVersion = headerInfo.fileVersion;\n        var fileVersionCheckNum = fileVersion >= 5 ? 14 : 15;\n        var isDiffEncoding;\n        var zMax = headerInfo.zMax;\n        //var resultPixelsAllDim = resultPixels;\n        var resultPixelsPrevDim;\n        for (blockY = 0; blockY < numBlocksY; blockY++) {\n          thisBlockHeight = (blockY !== numBlocksY - 1) ? microBlockSize : lastBlockHeight;\n          for (blockX = 0; blockX < numBlocksX; blockX++) {\n            //console.debug(\"y\" + blockY + \" x\" + blockX);\n            thisBlockWidth = (blockX !== numBlocksX - 1) ? microBlockSize : lastBlockWidth;\n\n            outPtr = blockY * width * microBlockSize + blockX * microBlockSize;\n            outStride = width - thisBlockWidth;\n\n            for (iDim = 0; iDim < numDims; iDim++) {\n              if (numDims > 1) {\n                resultPixelsPrevDim = resultPixels;\n                outPtr = blockY * width * microBlockSize + blockX * microBlockSize;\n                resultPixels = new OutPixelTypeArray(data.pixels.resultPixels.buffer, numPixels * iDim * dataTypeSize, numPixels);\n                zMax = headerInfo.maxValues[iDim];\n              } else {\n                resultPixelsPrevDim = null;\n              }\n              bytesLeft = input.byteLength - data.ptr;\n              view = new DataView(input, data.ptr, Math.min(10, bytesLeft));\n              block = {};\n              blockPtr = 0;\n              headerByte = view.getUint8(0);\n              blockPtr++;\n              isDiffEncoding = headerInfo.fileVersion >= 5 ? headerByte & 4 : 0;\n              bits67 = (headerByte >> 6) & 0xFF;\n              testCode = (headerByte >> 2) & fileVersionCheckNum;    // use bits 2345 for integrity check\n              if (testCode !== (((blockX * microBlockSize) >> 3) & fileVersionCheckNum)) {\n                throw \"integrity issue\";\n              }\n\n              if (isDiffEncoding && iDim === 0) {\n                throw \"integrity issue\";\n              }\n\n              blockEncoding = headerByte & 3;\n              if (blockEncoding > 3) {\n                data.ptr += blockPtr;\n                throw \"Invalid block encoding (\" + blockEncoding + \")\";\n              }\n              else if (blockEncoding === 2) { //constant 0\n                if (isDiffEncoding) {\n                  if (mask) {\n                    for (row = 0; row < thisBlockHeight; row++) {\n                      for (col = 0; col < thisBlockWidth; col++) {\n                        if (mask[outPtr]) {\n                          resultPixels[outPtr] = resultPixelsPrevDim[outPtr];\n                        }\n                        outPtr++;\n                      }\n                    }\n                  }\n                  else {\n                    for (row = 0; row < thisBlockHeight; row++) {\n                      for (col = 0; col < thisBlockWidth; col++) {\n                        resultPixels[outPtr] = resultPixelsPrevDim[outPtr];\n                        outPtr++;\n                      }\n                    }\n                  }\n                }\n                data.counter.constant++;\n                data.ptr += blockPtr;\n                continue;\n              }\n              else if (blockEncoding === 0) {  //uncompressed\n                if (isDiffEncoding) {\n                  // doesn't make sense, should not happen\n                  throw \"integrity issue\";\n                }\n                data.counter.uncompressed++;\n                data.ptr += blockPtr;\n                numBytes = thisBlockHeight * thisBlockWidth * dataTypeSize;\n                bytesleft = input.byteLength - data.ptr;\n                numBytes = numBytes < bytesleft ? numBytes : bytesleft;\n                //bit alignment\n                arrayBuf = new ArrayBuffer((numBytes % dataTypeSize) === 0 ? numBytes : (numBytes + dataTypeSize - numBytes % dataTypeSize));\n                store8 = new Uint8Array(arrayBuf);\n                store8.set(new Uint8Array(input, data.ptr, numBytes));\n                rawData = new OutPixelTypeArray(arrayBuf);\n                z = 0;\n                if (mask) {\n                  for (row = 0; row < thisBlockHeight; row++) {\n                    for (col = 0; col < thisBlockWidth; col++) {\n                      if (mask[outPtr]) {\n                        resultPixels[outPtr] = rawData[z++];\n                      }\n                      outPtr++;\n                    }\n                    outPtr += outStride;\n                  }\n                }\n                else {//all valid\n                  for (row = 0; row < thisBlockHeight; row++) {\n                    for (col = 0; col < thisBlockWidth; col++) {\n                      resultPixels[outPtr++] = rawData[z++];\n                    }\n                    outPtr += outStride;\n                  }\n                }\n                data.ptr += z * dataTypeSize;\n              }\n              else { //1 or 3\n                offsetType = Lerc2Helpers.getDataTypeUsed((isDiffEncoding && imageType < 6) ? 4 : imageType, bits67);\n                offset = Lerc2Helpers.getOnePixel(block, blockPtr, offsetType, view);\n                blockPtr += Lerc2Helpers.getDataTypeSize(offsetType);\n                if (blockEncoding === 3) //constant offset value\n                {\n                  data.ptr += blockPtr;\n                  data.counter.constantoffset++;\n                  //you can delete the following resultMask case in favor of performance because val is constant and users use nodata mask, otherwise nodatavalue post processing handles it too.\n                  //while the above statement is true, we're not doing it as we want to keep invalid pixel value at 0 rather than arbitrary values\n                  if (mask) {\n                    for (row = 0; row < thisBlockHeight; row++) {\n                      for (col = 0; col < thisBlockWidth; col++) {\n                        if (mask[outPtr]) {\n                          resultPixels[outPtr] = isDiffEncoding ? Math.min(zMax, resultPixelsPrevDim[outPtr] + offset) : offset;\n                        }\n                        outPtr++;\n                      }\n                      outPtr += outStride;\n                    }\n                  }\n                  else {\n                    for (row = 0; row < thisBlockHeight; row++) {\n                      for (col = 0; col < thisBlockWidth; col++) {\n                        resultPixels[outPtr] = isDiffEncoding ? Math.min(zMax, resultPixelsPrevDim[outPtr] + offset) : offset;\n                        outPtr++;\n                      }\n                      outPtr += outStride;\n                    }\n                  }\n                }\n                else { //bitstuff encoding is 3\n                  data.ptr += blockPtr;\n                  //heavy lifting\n                  Lerc2Helpers.decodeBits(input, data, blockDataBuffer, offset, iDim);\n                  blockPtr = 0;\n                  // duplicate code to favor performance, diff encoding is for multidimension only\n                  if (isDiffEncoding) {\n                    if (mask) {\n                      for (row = 0; row < thisBlockHeight; row++) {\n                        for (col = 0; col < thisBlockWidth; col++) {\n                          if (mask[outPtr]) {\n                            resultPixels[outPtr] = blockDataBuffer[blockPtr++] + resultPixelsPrevDim[outPtr];\n                          }\n                          outPtr++;\n                        }\n                        outPtr += outStride;\n                      }\n                    }\n                    else {\n                      for (row = 0; row < thisBlockHeight; row++) {\n                        for (col = 0; col < thisBlockWidth; col++) {\n                          resultPixels[outPtr] = blockDataBuffer[blockPtr++] + resultPixelsPrevDim[outPtr];\n                          outPtr++;\n                        }\n                        outPtr += outStride;\n                      }\n                    }\n                  }\n                  else if (mask) {\n                    for (row = 0; row < thisBlockHeight; row++) {\n                      for (col = 0; col < thisBlockWidth; col++) {\n                        if (mask[outPtr]) {\n                          resultPixels[outPtr] = blockDataBuffer[blockPtr++];\n                        }\n                        outPtr++;\n                      }\n                      outPtr += outStride;\n                    }\n                  }\n                  else {\n                    for (row = 0; row < thisBlockHeight; row++) {\n                      for (col = 0; col < thisBlockWidth; col++) {\n                        resultPixels[outPtr++] = blockDataBuffer[blockPtr++];\n                      }\n                      outPtr += outStride;\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n        //swap for BIP: it's always easier for clients to handle BSQ so we keep existing logic and introduce a swap here to minimze changes\n        if (numDims > 1 && !useBSQForOutputDim) {\n          data.pixels.resultPixels = Lerc2Helpers.swapDimensionOrder(data.pixels.resultPixels, numPixels, numDims, OutPixelTypeArray);\n        }\n      },\n\n      /*****************\n      *  private methods (helper methods)\n      *****************/\n\n      formatFileInfo: function(data) {\n        return {\n          \"fileIdentifierString\": data.headerInfo.fileIdentifierString,\n          \"fileVersion\": data.headerInfo.fileVersion,\n          \"imageType\": data.headerInfo.imageType,\n          \"height\": data.headerInfo.height,\n          \"width\": data.headerInfo.width,\n          \"numValidPixel\": data.headerInfo.numValidPixel,\n          \"microBlockSize\": data.headerInfo.microBlockSize,\n          \"blobSize\": data.headerInfo.blobSize,\n          \"maxZError\": data.headerInfo.maxZError,\n          \"pixelType\": Lerc2Helpers.getPixelType(data.headerInfo.imageType),\n          \"eofOffset\": data.eofOffset,\n          \"mask\": data.mask ? {\n            \"numBytes\": data.mask.numBytes\n          } : null,\n          \"pixels\": {\n            \"numBlocksX\": data.pixels.numBlocksX,\n            \"numBlocksY\": data.pixels.numBlocksY,\n            //\"numBytes\": data.pixels.numBytes,\n            \"maxValue\": data.headerInfo.zMax,\n            \"minValue\": data.headerInfo.zMin,\n            \"noDataValue\": data.noDataValue\n          }\n        };\n      },\n\n      constructConstantSurface: function(data, useBSQForOutputDim) {\n        var val = data.headerInfo.zMax;\n        var valMin = data.headerInfo.zMin;\n        var maxValues = data.headerInfo.maxValues;\n        var numDims = data.headerInfo.numDims;\n        var numPixels = data.headerInfo.height * data.headerInfo.width;\n        var i = 0, k = 0, nStart = 0;\n        var mask = data.pixels.resultMask;\n        var resultPixels = data.pixels.resultPixels;\n        if (mask) {\n          if (numDims > 1) {\n            if (useBSQForOutputDim) {\n              for (i = 0; i < numDims; i++) {\n                nStart = i * numPixels;\n                val = maxValues[i];\n                for (k = 0; k < numPixels; k++) {\n                  if (mask[k]) {\n                    resultPixels[nStart + k] = val;\n                  }\n                }\n              }  \n            }\n            else {\n              for (k = 0; k < numPixels; k++) {\n                if (mask[k]) {\n                  nStart = k * numDims;\n                  for (i = 0; i < numDims; i++) {\n                    resultPixels[nStart + numDims] = maxValues[i];\n                  }\n                }\n              }\n            }\n          }\n          else {\n            for (k = 0; k < numPixels; k++) {\n              if (mask[k]) {\n                resultPixels[k] = val;\n              }\n            }\n          }\n        }\n        else {\n          if (numDims > 1 && valMin !== val) {\n            if (useBSQForOutputDim) {\n              for (i = 0; i < numDims; i++) {\n                nStart = i * numPixels;\n                val = maxValues[i];\n                for (k = 0; k < numPixels; k++) {\n                  resultPixels[nStart + k] = val;\n                }\n              }\n            }\n            else {\n              for (k = 0; k < numPixels; k++) {\n                nStart = k * numDims;\n                for (i = 0; i < numDims; i++) {\n                  resultPixels[nStart + i] = maxValues[i];\n                }\n              }\n            }\n          }\n          else {\n            for (k = 0; k < numPixels * numDims; k++) {\n              resultPixels[k] = val;\n            }\n          }\n        }\n        return;\n      },\n\n      getDataTypeArray: function(t) {\n        var tp;\n        switch (t) {\n          case 0: //char\n            tp = Int8Array;\n            break;\n          case 1: //byte\n            tp = Uint8Array;\n            break;\n          case 2: //short\n            tp = Int16Array;\n            break;\n          case 3: //ushort\n            tp = Uint16Array;\n            break;\n          case 4:\n            tp = Int32Array;\n            break;\n          case 5:\n            tp = Uint32Array;\n            break;\n          case 6:\n            tp = Float32Array;\n            break;\n          case 7:\n            tp = Float64Array;\n            break;\n          default:\n            tp = Float32Array;\n        }\n        return tp;\n      },\n\n      getPixelType: function(t) {\n        var tp;\n        switch (t) {\n          case 0: //char\n            tp = \"S8\";\n            break;\n          case 1: //byte\n            tp = \"U8\";\n            break;\n          case 2: //short\n            tp = \"S16\";\n            break;\n          case 3: //ushort\n            tp = \"U16\";\n            break;\n          case 4:\n            tp = \"S32\";\n            break;\n          case 5:\n            tp = \"U32\";\n            break;\n          case 6:\n            tp = \"F32\";\n            break;\n          case 7:\n            tp = \"F64\";\n            break;\n          default:\n            tp = \"F32\";\n        }\n        return tp;\n      },\n\n      isValidPixelValue: function(t, val) {\n        if (val == null) {\n          return false;\n        }\n        var isValid;\n        switch (t) {\n          case 0: //char\n            isValid = val >= -128 && val <= 127;\n            break;\n          case 1: //byte  (unsigned char)\n            isValid = val >= 0 && val <= 255;\n            break;\n          case 2: //short\n            isValid = val >= -32768 && val <= 32767;\n            break;\n          case 3: //ushort\n            isValid = val >= 0 && val <= 65536;\n            break;\n          case 4: //int 32\n            isValid = val >= -2147483648 && val <= 2147483647;\n            break;\n          case 5: //uinit 32\n            isValid = val >= 0 && val <= 4294967296;\n            break;\n          case 6:\n            isValid = val >= -3.4027999387901484e+38 && val <= 3.4027999387901484e+38;\n            break;\n          case 7:\n            isValid = val >= -1.7976931348623157e+308 && val <= 1.7976931348623157e+308;\n            break;\n          default:\n            isValid = false;\n        }\n        return isValid;\n      },\n\n      getDataTypeSize: function(t) {\n        var s = 0;\n        switch (t) {\n          case 0: //ubyte\n          case 1: //byte\n            s = 1;\n            break;\n          case 2: //short\n          case 3: //ushort\n            s = 2;\n            break;\n          case 4:\n          case 5:\n          case 6:\n            s = 4;\n            break;\n          case 7:\n            s = 8;\n            break;\n          default:\n            s = t;\n        }\n        return s;\n      },\n\n      getDataTypeUsed: function(dt, tc) {\n        var t = dt;\n        switch (dt) {\n          case 2: //short\n          case 4: //long\n            t = dt - tc;\n            break;\n          case 3: //ushort\n          case 5: //ulong\n            t = dt - 2 * tc;\n            break;\n          case 6: //float\n            if (0 === tc) {\n              t = dt;\n            }\n            else if (1 === tc) {\n              t = 2;\n            }\n            else {\n              t = 1;//byte\n            }\n            break;\n          case 7: //double\n            if (0 === tc) {\n              t = dt;\n            }\n            else {\n              t = dt - 2 * tc + 1;\n            }\n            break;\n          default:\n            t = dt;\n            break;\n        }\n        return t;\n      },\n\n      getOnePixel: function(block, blockPtr, offsetType, view) {\n        var temp = 0;\n        switch (offsetType) {\n          case 0: //char\n            temp = view.getInt8(blockPtr);\n            break;\n          case 1: //byte\n            temp = view.getUint8(blockPtr);\n            break;\n          case 2:\n            temp = view.getInt16(blockPtr, true);\n            break;\n          case 3:\n            temp = view.getUint16(blockPtr, true);\n            break;\n          case 4:\n            temp = view.getInt32(blockPtr, true);\n            break;\n          case 5:\n            temp = view.getUInt32(blockPtr, true);\n            break;\n          case 6:\n            temp = view.getFloat32(blockPtr, true);\n            break;\n          case 7:\n            temp = view.getFloat64(blockPtr, true);\n            break;\n          default:\n            throw (\"the decoder does not understand this pixel type\");\n        }\n        return temp;\n      },\n\n      swapDimensionOrder: function(pixels, numPixels, numDims, OutPixelTypeArray, inputIsBIP) {\n        var i = 0, j = 0, iDim = 0, temp = 0, swap = pixels;\n        if (numDims > 1) {\n          swap = new OutPixelTypeArray(numPixels * numDims);\n          if (inputIsBIP) {\n            for (i=0; i<numPixels; i++) {\n              temp = i;\n              for (iDim=0; iDim < numDims; iDim++, temp += numPixels) {\n                swap[temp] = pixels[j++];\n              }\n            }  \n          }\n          else {\n            for (i=0; i<numPixels; i++) {\n              temp = i;\n              for (iDim=0; iDim < numDims; iDim++, temp += numPixels) {\n                swap[j++] = pixels[temp];\n              }\n            }\n          }\n        }\n        return swap;\n      }\n    };\n\n    /***************************************************\n    *private class for a tree node. Huffman code is in Lerc2Helpers\n    ****************************************************/\n    var TreeNode = function(val, left, right) {\n      this.val = val;\n      this.left = left;\n      this.right = right;\n    };\n\n    var Lerc2Decode = {\n      /*\n      * ********removed options compared to LERC1. We can bring some of them back if needed.\n       * removed pixel type. LERC2 is typed and doesn't require user to give pixel type\n       * changed encodedMaskData to maskData. LERC2 's js version make it faster to use maskData directly.\n       * removed returnMask. mask is used by LERC2 internally and is cost free. In case of user input mask, it's returned as well and has neglible cost.\n       * removed nodatavalue. Because LERC2 pixels are typed, nodatavalue will sacrify a useful value for many types (8bit, 16bit) etc,\n       *       user has to be knowledgable enough about raster and their data to avoid usability issues. so nodata value is simply removed now.\n       *       We can add it back later if their's a clear requirement.\n       * removed encodedMask. This option was not implemented in LercDecode. It can be done after decoding (less efficient)\n       * removed computeUsedBitDepths.\n       *\n       *\n       * response changes compared to LERC1\n       * 1. encodedMaskData is not available\n       * 2. noDataValue is optional (returns only if user's noDataValue is with in the valid data type range)\n       * 3. maskData is always available\n      */\n      /*****************\n      *  public properties\n      ******************/\n      //HUFFMAN_LUT_BITS_MAX: 12, //use 2^12 lut, not configurable\n\n      /*****************\n      *  public methods\n      *****************/\n\n      /**\n       * Decode a LERC2 byte stream and return an object containing the pixel data and optional metadata.\n       *\n       * @param {ArrayBuffer} input The LERC input byte stream\n       * @param {object} [options] options Decoding options\n       * @param {number} [options.inputOffset] The number of bytes to skip in the input byte stream. A valid LERC file is expected at that position\n       * @param {boolean} [options.returnFileInfo] If true, the return value will have a fileInfo property that contains metadata obtained from the LERC headers and the decoding process\n       * @param {boolean} [options.returnPixelInterleavedDims]  If true, returned dimensions are pixel-interleaved, a.k.a [p1_dim0, p1_dim1, p1_dimn, p2_dim0...], default is [p1_dim0, p2_dim0, ..., p1_dim1, p2_dim1...]\n       */\n      decode: function(/*byte array*/ input, /*object*/ options) {\n        //currently there's a bug in the sparse array, so please do not set to false\n        options = options || {};\n        var noDataValue = options.noDataValue;\n\n        //initialize\n        var i = 0, data = {};\n        data.ptr = options.inputOffset || 0;\n        data.pixels = {};\n\n        // File header\n        if (!Lerc2Helpers.readHeaderInfo(input, data)) {\n          return;\n        }\n\n        var headerInfo = data.headerInfo;\n        var fileVersion = headerInfo.fileVersion;\n        var OutPixelTypeArray = Lerc2Helpers.getDataTypeArray(headerInfo.imageType);\n\n        // version check\n        if (fileVersion > 5) {\n          throw \"unsupported lerc version 2.\" + fileVersion;\n        }\n\n        // Mask Header\n        Lerc2Helpers.readMask(input, data);\n        if (headerInfo.numValidPixel !== headerInfo.width * headerInfo.height && !data.pixels.resultMask) {\n          data.pixels.resultMask = options.maskData;\n        }\n\n        var numPixels = headerInfo.width * headerInfo.height;\n        data.pixels.resultPixels = new OutPixelTypeArray(numPixels * headerInfo.numDims);\n\n        data.counter = {\n          onesweep: 0,\n          uncompressed: 0,\n          lut: 0,\n          bitstuffer: 0,\n          constant: 0,\n          constantoffset: 0\n        };\n        var useBSQForOutputDim = !options.returnPixelInterleavedDims;\n        if (headerInfo.numValidPixel !== 0) {\n          //not tested\n          if (headerInfo.zMax === headerInfo.zMin) //constant surface\n          {\n            Lerc2Helpers.constructConstantSurface(data, useBSQForOutputDim);\n          }\n          else if (fileVersion >= 4 && Lerc2Helpers.checkMinMaxRanges(input, data)) {\n            Lerc2Helpers.constructConstantSurface(data, useBSQForOutputDim);\n          }\n          else {\n            var view = new DataView(input, data.ptr, 2);\n            var bReadDataOneSweep = view.getUint8(0);\n            data.ptr++;\n            if (bReadDataOneSweep) {\n              //console.debug(\"OneSweep\");\n              Lerc2Helpers.readDataOneSweep(input, data, OutPixelTypeArray, useBSQForOutputDim);\n            }\n            else {\n              //lerc2.1: //bitstuffing + lut\n              //lerc2.2: //bitstuffing + lut + huffman\n              //lerc2.3: new bitstuffer\n              if (fileVersion > 1 && headerInfo.imageType <= 1 && Math.abs(headerInfo.maxZError - 0.5) < 0.00001) {\n                //this is 2.x plus 8 bit (unsigned and signed) data, possiblity of Huffman\n                var flagHuffman = view.getUint8(1);\n                data.ptr++;\n                data.encodeMode = flagHuffman;\n                if (flagHuffman > 2 || (fileVersion < 4 && flagHuffman > 1)) {\n                  throw \"Invalid Huffman flag \" + flagHuffman;\n                }\n                if (flagHuffman) {//1 - delta Huffman, 2 - Huffman\n                  //console.log(\"Huffman\");\n                  Lerc2Helpers.readHuffman(input, data, OutPixelTypeArray, useBSQForOutputDim);\n                }\n                else {\n                  //console.log(\"Tiles\");\n                  Lerc2Helpers.readTiles(input, data, OutPixelTypeArray, useBSQForOutputDim);\n                }\n              }\n              else { //lerc2.x non-8 bit data\n                //console.log(\"Tiles\");\n                Lerc2Helpers.readTiles(input, data, OutPixelTypeArray, useBSQForOutputDim);\n              }\n            }\n          }\n        }\n\n        data.eofOffset = data.ptr;\n        var diff;\n        if (options.inputOffset) {\n          diff = data.headerInfo.blobSize + options.inputOffset - data.ptr;\n          if (Math.abs(diff) >= 1) {\n            //console.debug(\"incorrect eof: dataptr \" + data.ptr + \" offset \" + options.inputOffset + \" blobsize \" + data.headerInfo.blobSize + \" diff: \" + diff);\n            data.eofOffset = options.inputOffset + data.headerInfo.blobSize;\n          }\n        }\n        else {\n          diff = data.headerInfo.blobSize - data.ptr;\n          if (Math.abs(diff) >= 1) {\n            //console.debug(\"incorrect first band eof: dataptr \" + data.ptr + \" blobsize \" + data.headerInfo.blobSize + \" diff: \" + diff);\n            data.eofOffset = data.headerInfo.blobSize;\n          }\n        }\n\n        var result = {\n          width: headerInfo.width,\n          height: headerInfo.height,\n          pixelData: data.pixels.resultPixels,\n          minValue: headerInfo.zMin,\n          maxValue: headerInfo.zMax,\n          validPixelCount: headerInfo.numValidPixel,\n          dimCount: headerInfo.numDims,\n          dimStats: {\n            minValues: headerInfo.minValues,\n            maxValues: headerInfo.maxValues\n          },\n          maskData: data.pixels.resultMask\n          //noDataValue: noDataValue\n        };\n\n        //we should remove this if there's no existing client\n        //optional noDataValue processing, it's user's responsiblity\n        if (data.pixels.resultMask && Lerc2Helpers.isValidPixelValue(headerInfo.imageType, noDataValue)) {\n          var mask = data.pixels.resultMask;\n          for (i = 0; i < numPixels; i++) {\n            if (!mask[i]) {\n              result.pixelData[i] = noDataValue;\n            }\n          }\n          result.noDataValue = noDataValue;\n        }\n        data.noDataValue = noDataValue;\n        if (options.returnFileInfo) {\n          result.fileInfo = Lerc2Helpers.formatFileInfo(data);\n        }\n        return result;\n      },\n\n      getBandCount: function(/*byte array*/ input) {\n        var count = 0;\n        var i = 0;\n        var temp = {};\n        temp.ptr = 0;\n        temp.pixels = {};\n        while (i < input.byteLength - 58) {\n          Lerc2Helpers.readHeaderInfo(input, temp);\n          i += temp.headerInfo.blobSize;\n          count++;\n          temp.ptr = i;\n        }\n        return count;\n      }\n    };\n\n    return Lerc2Decode;\n  })();\n\n  var isPlatformLittleEndian = (function() {\n    var a = new ArrayBuffer(4);\n    var b = new Uint8Array(a);\n    var c = new Uint32Array(a);\n    c[0] = 1;\n    return b[0] === 1;\n  })();\n\n  var Lerc = {\n    /************wrapper**********************************************/\n    /**\n     * A wrapper for decoding both LERC1 and LERC2 byte streams capable of handling multiband pixel blocks for various pixel types.\n     *\n     * @alias module:Lerc\n     * @param {ArrayBuffer} input The LERC input byte stream\n     * @param {object} [options] The decoding options below are optional.\n     * @param {number} [options.inputOffset] The number of bytes to skip in the input byte stream. A valid Lerc file is expected at that position.\n     * @param {string} [options.pixelType] (LERC1 only) Default value is F32. Valid pixel types for input are U8/S8/S16/U16/S32/U32/F32.\n     * @param {number} [options.noDataValue] (LERC1 only). It is recommended to use the returned mask instead of setting this value.\n     * @param {boolean} [options.returnPixelInterleavedDims] (nDim LERC2 only) If true, returned dimensions are pixel-interleaved, a.k.a [p1_dim0, p1_dim1, p1_dimn, p2_dim0...], default is [p1_dim0, p2_dim0, ..., p1_dim1, p2_dim1...]\n     * @returns {{width, height, pixels, pixelType, mask, statistics}}\n       * @property {number} width Width of decoded image.\n       * @property {number} height Height of decoded image.\n       * @property {array} pixels [band1, band2, …] Each band is a typed array of width*height.\n       * @property {string} pixelType The type of pixels represented in the output.\n       * @property {mask} mask Typed array with a size of width*height, or null if all pixels are valid.\n       * @property {array} statistics [statistics_band1, statistics_band2, …] Each element is a statistics object representing min and max values\n    **/\n    decode: function(encodedData, options) {\n      if (!isPlatformLittleEndian) {\n        throw \"Big endian system is not supported.\";\n      }\n      options = options || {};\n      var inputOffset = options.inputOffset || 0;\n      var fileIdView = new Uint8Array(encodedData, inputOffset, 10);\n      var fileIdentifierString = String.fromCharCode.apply(null, fileIdView);\n      var lerc, majorVersion;\n      if (fileIdentifierString.trim() === \"CntZImage\") {\n        lerc = LercDecode;\n        majorVersion = 1;\n      }\n      else if (fileIdentifierString.substring(0, 5) === \"Lerc2\") {\n        lerc = Lerc2Decode;\n        majorVersion = 2;\n      }\n      else {\n        throw \"Unexpected file identifier string: \" + fileIdentifierString;\n      }\n\n      var iPlane = 0, eof = encodedData.byteLength - 10, encodedMaskData, bandMasks = [], bandMask, maskData;\n      var decodedPixelBlock = {\n        width: 0,\n        height: 0,\n        pixels: [],\n        pixelType: options.pixelType,\n        mask: null,\n        statistics: []\n      };\n      var uniqueBandMaskCount = 0;\n\n      while (inputOffset < eof) {\n        var result = lerc.decode(encodedData, {\n          inputOffset: inputOffset,//for both lerc1 and lerc2\n          encodedMaskData: encodedMaskData,//lerc1 only\n          maskData: maskData,//lerc2 only\n          returnMask: iPlane === 0 ? true : false,//lerc1 only\n          returnEncodedMask: iPlane === 0 ? true : false,//lerc1 only\n          returnFileInfo: true,//for both lerc1 and lerc2\n          returnPixelInterleavedDims: options.returnPixelInterleavedDims,//for ndim lerc2 only\n          pixelType: options.pixelType || null,//lerc1 only\n          noDataValue: options.noDataValue || null//lerc1 only\n        });\n\n        inputOffset = result.fileInfo.eofOffset;\n        maskData = result.maskData;//lerc2\n        if (iPlane === 0) {\n          encodedMaskData = result.encodedMaskData;//lerc1\n          decodedPixelBlock.width = result.width;\n          decodedPixelBlock.height = result.height;\n          decodedPixelBlock.dimCount = result.dimCount || 1;\n          //decodedPixelBlock.dimStats = decodedPixelBlock.dimStats;\n          decodedPixelBlock.pixelType = result.pixelType || result.fileInfo.pixelType;\n          decodedPixelBlock.mask = maskData;\n        }\n        if (majorVersion > 1) {\n          if (maskData) {\n            bandMasks.push(maskData);\n          }\n          if (result.fileInfo.mask && result.fileInfo.mask.numBytes > 0) {\n            uniqueBandMaskCount++;\n          }\n        }\n\n        iPlane++;\n        decodedPixelBlock.pixels.push(result.pixelData);\n        decodedPixelBlock.statistics.push({\n          minValue: result.minValue,\n          maxValue: result.maxValue,\n          noDataValue: result.noDataValue,\n          dimStats: result.dimStats\n        });\n      }\n      var i, j, numPixels;\n      if (majorVersion > 1 && uniqueBandMaskCount > 1) {\n        numPixels = decodedPixelBlock.width * decodedPixelBlock.height;\n        decodedPixelBlock.bandMasks = bandMasks;\n        maskData = new Uint8Array(numPixels);\n        maskData.set(bandMasks[0]);\n        for (i = 1; i < bandMasks.length; i++) {\n          bandMask = bandMasks[i];\n          for (j = 0; j < numPixels; j++) {\n            maskData[j] = maskData[j] & bandMask[j];\n          }\n        }\n        decodedPixelBlock.maskData = maskData;\n      }\n\n      return decodedPixelBlock;\n    }\n  };\n\n  if (typeof define === \"function\" && define.amd) {/* jshint ignore:line */\n    //amd loaders such as dojo and requireJS\n    //http://wiki.commonjs.org/wiki/Modules/AsynchronousDefinition\n    define([], function() { return Lerc; });/* jshint ignore:line */\n  }\n  else if (typeof module !== \"undefined\" && module.exports) {/* jshint ignore:line */\n    //commonJS module 1.0/1.1/1.1.1 systems, such as nodeJS\n    //http://wiki.commonjs.org/wiki/Modules\n    module.exports = Lerc;/* jshint ignore:line */\n  }\n  else {\n    //assign to this, most likely window\n    this.Lerc = Lerc;\n  }\n\n})();\n","import { inflate } from 'pako';\nimport Lerc from 'lerc';\nimport BaseDecoder from './basedecoder.js';\nimport { LercParameters, LercAddCompression } from '../globals.js';\n\nexport default class LercDecoder extends BaseDecoder {\n  constructor(fileDirectory) {\n    super();\n\n    this.planarConfiguration = typeof fileDirectory.PlanarConfiguration !== 'undefined' ? fileDirectory.PlanarConfiguration : 1;\n    this.samplesPerPixel = typeof fileDirectory.SamplesPerPixel !== 'undefined' ? fileDirectory.SamplesPerPixel : 1;\n\n    this.addCompression = fileDirectory.LercParameters[LercParameters.AddCompression];\n  }\n\n  decodeBlock(buffer) {\n    switch (this.addCompression) {\n      case LercAddCompression.None:\n        break;\n      case LercAddCompression.Deflate:\n        buffer = inflate(new Uint8Array(buffer)).buffer; // eslint-disable-line no-param-reassign, prefer-destructuring\n        break;\n      default:\n        throw new Error(`Unsupported LERC additional compression method identifier: ${this.addCompression}`);\n    }\n\n    const lercResult = Lerc.decode(buffer, { returnPixelInterleavedDims: this.planarConfiguration === 1 });\n    const lercData = lercResult.pixels[0];\n    return lercData.buffer;\n  }\n}\n"],"names":["CntZImage","uncompressPixelValues","formatFileInfo","computeUsedBitDepths","parse","unstuff","a","b","LercDecode","Lerc2Decode","isPlatformLittleEndian","Lerc","input","options","skipMask","encodedMaskData","parsedData","inputOffset","noDataValue","defaultNoDataValue","uncompressedData","pixelType","Float32Array","returnMask","result","width","height","pixelData","resultPixels","minValue","maxValue","pixels","resultMask","maskData","returnEncodedMask","mask","bitset","returnFileInfo","fileInfo","bitDepths","data","TypedArrayClass","maskBitset","storeDecodedMask","currentValue","blockIdx","numX","numBlocksX","numY","numBlocksY","blockWidth","Math","floor","blockHeight","scale","maxZError","Number","MAX_VALUE","Uint8Array","xx","yy","blockDataBuffer","y","thisBlockHeight","x","thisBlockWidth","blockData","blockPtr","constValue","maskByte","outPtr","outStride","block","blocks","encoding","rawData","stuffedData","bitsPerPixel","numValidPixels","offset","fileIdentifierString","fileVersion","imageType","eofOffset","numBytes","numBlocks","i","float32","Object","keys","fp","fileIdView","String","fromCharCode","apply","trim","view","DataView","getInt32","getUint32","getFloat64","getFloat32","ceil","cnt","getInt16","ip","op","getUint8","val","length","actualNumBlocksX","actualNumBlocksY","Array","blockI","blockY","blockX","size","bytesLeft","byteLength","min","headerByte","offsetType","getInt8","numValidPixelsType","getUint16","arrayBuf","numPixels","ArrayBuffer","set","dataBytes","dataWords","Uint32Array","src","dest","o","n","buffer","bitMask","bitsLeft","nmax","numInvalidTailBytes","missingBits","BitStuffer","lutArr","bitPos","Lerc2Helpers","HUFFMAN_LUT_BITS_MAX","computeChecksumFletcher32","sum1","sum2","len","words","tlen","readHeaderInfo","ptr","headerInfo","lastIndexOf","keyLength","checksum","numDims","numValidPixel","microBlockSize","blobSize","zMin","zMax","this","checkMinMaxRanges","OutPixelTypeArray","getDataTypeArray","rangeBytes","getDataTypeSize","minValues","readSubArray","maxValues","equal","readMask","mb","k","readDataOneSweep","useBSQForOutputDim","swapDimensionOrder","z","nStart","readHuffmanTree","BITS_MAX","i0","i1","decodeBits","j","codeTable","first","second","word","srcPtr","numBitsLUTQick","numBitsLUT","tree","TreeNode","undefined","max","entry","code","numEntries","jj","node","decodeLut","right","left","readHuffman","delta","valTmp","valTmpQuick","ii","huffmanInfo","prevVal","iDim","deltaEncode","encodeMode","resultPixelsAllDim","viewByteLength","bits67","doLut","numBits","numElements","store8","lutData","lutBytes","counter","lut","unshift","bitstuffer","readTiles","dataTypeSize","blockEncoding","isDiffEncoding","resultPixelsPrevDim","row","col","bytesleft","lastBlockHeight","lastBlockWidth","fileVersionCheckNum","uncompressed","getDataTypeUsed","getOnePixel","constantoffset","constant","getPixelType","constructConstantSurface","valMin","t","tp","Int8Array","Int16Array","Uint16Array","Int32Array","Float64Array","isValidPixelValue","isValid","s","dt","tc","temp","getUInt32","inputIsBIP","swap","decode","onesweep","diff","returnPixelInterleavedDims","bReadDataOneSweep","abs","flagHuffman","validPixelCount","dimCount","dimStats","getBandCount","count","encodedData","lerc","majorVersion","substring","bandMask","iPlane","eof","bandMasks","decodedPixelBlock","statistics","uniqueBandMaskCount","push","LercDecoder","constructor","fileDirectory","super","planarConfiguration","PlanarConfiguration","samplesPerPixel","SamplesPerPixel","addCompression","LercParameters","decodeBlock","Error"],"sourceRoot":""}